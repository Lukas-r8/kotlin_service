# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

# Run CI for pull requests and for direct pushes to main so that
# successful merges publish a container image automatically.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  IMAGE_NAME: helloworld
  DIGITAL_OCEAN_REGISTRY: lukas-registry

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
      - name: Build with gradle
        run: ./gradlew check build
      - uses: actions/upload-artifact@master
        with:
          name: applicationJar
          # Upload the built jar(s). The wildcard keeps the
          # workflow stable when version numbers change.
          path: build/libs/*.jar

  upload:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Downloading artifacts
        uses: actions/download-artifact@master
        with:
          name: applicationJar
          # Target directory. The jar will be placed here so the
          # subsequent docker build can COPY it.
          path: build/libs
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Build docker image
        run: docker build . -f docker/service.dockerfile -t $IMAGE_NAME
      - name: push image to digitalocean
        run: |
              doctl registry login
              docker tag $IMAGE_NAME registry.digitalocean.com/$DIGITAL_OCEAN_REGISTRY/$IMAGE_NAME
              docker push registry.digitalocean.com/$DIGITAL_OCEAN_REGISTRY/$IMAGE_NAME
